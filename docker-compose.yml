version: '3.4'

services:
  eshopcloudnative.catalog.webui:
    image: ${DOCKER_REGISTRY-}eshop-catalog-web
    build:
      context: ./catalog
      dockerfile: eShopCloudNative.Catalog.WebUI/Dockerfile
    networks:
      - eshop-front
    depends_on:
      eshopcloudnative.catalog.bootstrapper:
        condition: service_started #service_completed_successfully (visual studio não suporta)
      api:
        condition: service_started #service_completed_successfully (visual studio não suporta)

  eshopcloudnative.catalog.bootstrapper:
    image: ${DOCKER_REGISTRY-}eshop-catalog-bootstrapper
    build:
      context: ./catalog
      dockerfile: eShopCloudNative.Catalog.Bootstrapper/Dockerfile
    networks:
      - eshop-back
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_started

  eshopcloudnative.catalog.webapi:
    image: ${DOCKER_REGISTRY-}eshop-catalog-webapi
    build:
      context: ./catalog
      dockerfile: eShopCloudNative.Catalog.WebApi/Dockerfile
    networks:
      - eshop-back

  api:
    image: kong:2.8.1-alpine
    volumes:
      - ./infra/api/kong.yml:/kong.yml
    environment:
      - LC_CTYPE=en_US.UTF-8
      - LC_ALL=en_US.UTF-8
      - KONG_DATABASE=off
      - KONG_DECLARATIVE_CONFIG=/kong.yml
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
    ports:
      - 8000:8000
    networks:
      - eshop-front
      - eshop-back
    depends_on:
      eshopcloudnative.catalog.webapi:
        condition: service_started #service_completed_successfully (visual studio não suporta)

  redis:
    image: redis:7.0.4
    container_name: redis-front
    networks:
      - eshop-front
      - eshop-back

  ##

  postgres:
    image: postgres:14.4
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      {
        "POSTGRES_DB": "eshop_db",
        "POSTGRES_USER": "eshop_user",
        "POSTGRES_PASSWORD": "eshop_pass"
      }
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "--dbname=eshop_db",
          "--username=eshop_user"
        ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - eshop-back

  pgadmin4:
    image: dpage/pgadmin4:6.12
    container_name: pgadmin
    hostname: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.admin
      PGADMIN_DEFAULT_PASSWORD: admin
    volumes:
      - "pgadmin_data:/var/lib/pgadmin/"
      - "./infra/pgadmin/servers.json:/pgadmin4/servers.json"
    ports:
      - "82:80"
    networks:
      - eshop-back
    depends_on:
      postgres:
        condition: service_healthy

  rabbitmq:
    container_name: RabbitMQ
    hostname: rabbitmq
    build:
      context: ./infra/rabbitmq
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/mnesia
    ports:
      - "15672:15672" #management # habilitado visualização no browser
      #- "15692:15692" #prometheus # desnecessário
      #- "5672:5672" #amqp       # desnecessário
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -I -s -L http://localhost:15672 || exit 1"
        ]
      interval: 30s
      timeout: 20s
      retries: 5
    networks:
      - eshop-back

  minio:
    image: quay.io/minio/minio
    ports:
      - 9000:9000
      - 9001:9001
    command: [ "server", "/data", "--console-address", ":9001" ]
    environment: {
        "MINIO_DOMAIN": "localhost"
    }
    volumes:
      - minio_data:/data
    networks:
      - eshop-front
      - eshop-back

networks:
  eshop-front:
    driver: bridge
  eshop-back:
    driver: bridge

volumes:
  rabbitmq_data:
  pgadmin_data:
  minio_data:


